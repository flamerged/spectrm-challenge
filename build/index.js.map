{"version":3,"sources":["../src/index.js"],"names":["port","process","env","PORT","Message","models","app","use","express","json","urlencoded","extended","get","req","res","findAll","then","messages","promises","forEach","message","push","increment","Promise","all","status","send","catch","error","console","log","id","params","where","length","Error","post","content","body","create","put","changes","update","returning","delete","destroy","listen"],"mappings":"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","sourcesContent":["import express from \"express\";\nimport models from \"../models/index\";\n\nconst port = process.env.PORT || 4000;\nconst { Message } = models;\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Routes\n\n// Get all messages\n\napp.get(\"/messages\", async (req, res) => {\n  Message.findAll()\n    .then((messages) => {\n      const promises = [];\n      messages.forEach((message) =>\n        promises.push(message.increment(\"retrievedCounter\"))\n      );\n      return Promise.all(promises);\n    })\n    .then((messages) => res.status(200).send(messages))\n    .catch((error) => {\n      console.log(error);\n      res.status(404).json({ status: \"failed\", error: `${error}` });\n    });\n});\n\n// Get single message by ID\n\napp.get(\"/messages/:id\", async (req, res) => {\n  const id = req.params.id;\n\n  Message.findAll({ where: { id } })\n    .then((message) => {\n      if (message.length > 0) {\n        message[0].increment(\"retrievedCounter\");\n      } else {\n        throw new Error(\"Message could not be found\");\n      }\n      res.status(200).send(message);\n    })\n    .catch((error) => {\n      console.log(error);\n      res.status(404).json({ status: \"failed\", error: `${error}` });\n    });\n});\n\n// Create a message\n\napp.post(\"/messages/\", async (req, res) => {\n  const { content } = req.body;\n\n  Message.create({ content })\n    .then((message) => res.status(201).send({ status: \"success\", message }))\n    .catch((error) => {\n      console.log(error);\n      res.status(400).json({ status: \"failed\", error: `${error}` });\n    });\n});\n\n// Update a message by ID\n\napp.put(\"/messages/:id\", async (req, res) => {\n  const changes = req.body;\n  const id = req.params.id;\n\n  Message.update({ ...changes }, { where: { id }, returning: true })\n    .then((message) => {\n      message = message[1][0].increment(\"retrievedCounter\");\n      return message;\n    })\n    .then((message) => {\n      res.status(202).send({ status: \"success\", message });\n    })\n    .catch((error) => {\n      console.log(error);\n      res.status(400).json({ status: \"failed\", error: `${error}` });\n    });\n});\n\n// delete a message by ID\n\napp.delete(\"/messages/:id\", async (req, res) => {\n  const id = req.params.id;\n\n  Message.destroy({ where: { id }, returning: true })\n    .then((status) => {\n      if (status === 0) {\n        throw new Error(\"Message could not be found\");\n      }\n      res.status(202).send({ status: \"success\" });\n    })\n    .catch((error) => {\n      console.log(error);\n      res.status(400).json({ status: \"failed\", error: `${error}` });\n    });\n});\n\napp.listen(port, () => {\n  console.log(`App started on port ${port}`);\n});\n"],"file":"index.js"}