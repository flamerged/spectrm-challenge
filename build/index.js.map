{"version":3,"sources":["../src/index.js"],"names":["port","process","env","PORT","Message","models","db","authenticate","then","console","log","NODE_ENV","error","app","use","express","json","urlencoded","extended","get","req","res","findAll","messages","status","send","id","params","where","message","post","content","body","create","retrievedCounter","put","changes","update","returning","destroy","Error","listen"],"mappings":"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","sourcesContent":["import express from \"express\";\nimport { db } from \"./config/db\";\nimport models from \"../models/index\";\nimport { v4 as uuid } from \"uuid\";\n\nconst port = process.env.PORT || 4000;\nconst { Message } = models;\n\ndb.authenticate()\n  .then(() => console.log(`connected to ${process.env.NODE_ENV} db`))\n  .catch((error) =>\n    console.log(\"something went wrong connecting to the database: \" + error)\n  );\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Routes todo\n\n// Get all messages\n\napp.get(\"/messages\", async (req, res) => {\n  try {\n    const messages = await Message.findAll();\n    res.status(200).send(messages);\n  } catch (error) {\n    console.log(error);\n    res.status(404).json({ status: \"failed\", error: `${error}` });\n  }\n});\n\n// Get single message by ID\n\napp.get(\"/messages/:id\", async (req, res) => {\n  const id = req.params.id;\n\n  try {\n    const message = await Message.findAll({ where: { id } });\n    res.status(200).send(message);\n  } catch (error) {\n    console.log(error);\n    res.status(404).json({ status: \"failed\", error: `${error}` });\n  }\n});\n\n// Create a message\n\napp.post(\"/messages/\", async (req, res) => {\n  const { content } = req.body;\n  console.log(req.body);\n  const id = uuid();\n\n  try {\n    const message = await Message.create({ id, content, retrievedCounter: 0 });\n    res.status(201).send(message);\n  } catch (error) {\n    console.log(error);\n    res.status(400).json({ status: \"failed\", error: `${error}` });\n  }\n});\n\n// Update a message by ID\n\napp.put(\"/messages/:id\", async (req, res) => {\n  const changes = req.body;\n  const id = req.params.id;\n\n  try {\n    const message = await Message.update(\n      { ...changes },\n      { where: { id }, returning: true }\n    );\n    res.status(202).send({ status: \"success\", message: message[1][0] });\n  } catch (error) {\n    console.log(error);\n    res.status(400).json({ status: \"failed\", error: `${error}` });\n  }\n});\n\n// delete a message by ID\n\napp.delete(\"/messages/:id\", async (req, res) => {\n  const id = req.params.id;\n\n  try {\n    const message = await Message.destroy({ where: { id }, returning: true });\n    if (message === 0) {\n      throw new Error(\"Message could not be found\");\n    }\n    res.status(202).send({ status: \"success\" });\n  } catch (error) {\n    console.log(error);\n    res.status(400).json({ status: \"failed\", error: `${error}` });\n  }\n});\n\napp.listen(port, () => {\n  console.log(`App started on port ${port}`);\n});\n"],"file":"index.js"}