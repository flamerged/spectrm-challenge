{"version":3,"sources":["../src/index.js"],"names":["port","process","env","PORT","Message","models","db","authenticate","then","console","log","NODE_ENV","catch","error","app","use","express","json","urlencoded","extended","get","req","res","messages","findAll","status","send","id","params","message","where","post","content","body","create","retrievedCounter","put","changes","update","returning","delete","destroy","Error","listen"],"mappings":"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","sourcesContent":["import express from \"express\";\nimport { db } from \"./config/db\";\nimport models from \"../models/index\";\nimport { v4 as uuid } from \"uuid\";\n\nconst port = process.env.PORT || 4000;\nconst { Message } = models;\n\ndb.authenticate()\n  .then(() => console.log(`connected to ${process.env.NODE_ENV} db`))\n  .catch((error) =>\n    console.log(\"something went wrong connecting to the database: \" + error)\n  );\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Routes todo\n\n// Get all messages\n\napp.get(\"/messages\", async (req, res) => {\n  try {\n    const messages = await Message.findAll();\n    res.status(200).send(messages);\n  } catch (error) {\n    console.log(error);\n    res.status(404).json({ status: \"failed\", error: `${error}` });\n  }\n});\n\n// Get single message by ID\n\napp.get(\"/messages/:id\", async (req, res) => {\n  const id = req.params.id;\n\n  try {\n    const message = await Message.findAll({ where: { id } });\n    res.status(200).send(message);\n  } catch (error) {\n    console.log(error);\n    res.status(404).json({ status: \"failed\", error: `${error}` });\n  }\n});\n\n// Create a message\n\napp.post(\"/messages/\", async (req, res) => {\n  const { content } = req.body;\n  console.log(req.body);\n  const id = uuid();\n\n  try {\n    const message = await Message.create({ id, content, retrievedCounter: 0 });\n    res.status(201).send(message);\n  } catch (error) {\n    console.log(error);\n    res.status(400).json({ status: \"failed\", error: `${error}` });\n  }\n});\n\n// Update a message by ID\n\napp.put(\"/messages/:id\", async (req, res) => {\n  const changes = req.body;\n  const id = req.params.id;\n\n  try {\n    const message = await Message.update(\n      { ...changes },\n      { where: { id }, returning: true }\n    );\n    res.status(202).send({ status: \"success\", message: message[1][0] });\n  } catch (error) {\n    console.log(error);\n    res.status(400).json({ status: \"failed\", error: `${error}` });\n  }\n});\n\n// delete a message by ID\n\napp.delete(\"/messages/:id\", async (req, res) => {\n  const id = req.params.id;\n\n  try {\n    const message = await Message.destroy({ where: { id }, returning: true });\n    if (message === 0) {\n      throw new Error(\"Message could not be found\");\n    }\n    res.status(202).send({ status: \"success\" });\n  } catch (error) {\n    console.log(error);\n    res.status(400).json({ status: \"failed\", error: `${error}` });\n  }\n});\n\napp.listen(port, () => {\n  console.log(`App started on port ${port}`);\n});\n"],"file":"index.js"}